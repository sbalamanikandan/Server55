
How to install and configure Testlink

Prerequisites:
- Java JDK
- MySQL Server
- Apache Web Server
- PHP5

Notes:
a. This tutorial was created using the following version of each software needed.
- Ubuntu 10.04 i386 as OS.
- TestLink 1.9.2
- MySQL 5.1
- Apache2

b. The installation of prerequisites is detailed at the end of the document.

c. As a personal recommendation, before start the testlink installer in the browser, set up the files and prerequisites to make the installation experience faster and easier.

Let’s Go!

1. Download & install some necessary packages
sudo apt-get install php5-mysql php5-pgsql php5-gd php5-ldap php-pear

2. Edit the php.ini file located in /etc/php5/apache2 and set the following parameters:
max_execution_time = 120
session.gc_maxlifetime = 2700

3.Restart the apache server

4. Download testlink:
http://sourceforge.net/projects/testlink/files/TestLink%201.9/TestLink%201.9.2/testlink-1.9.2.tar.gz/download

5. Unpack your testlink package, change the name and copy to your /www apache directory:
5.1 Unpack
tar zxvf testlink-1.9.2.tar.gz
5.2 Change the name
mv testlink-1.9.2.tar.gz testlink
5.3 Copy to the /www directory
sudo cp -r teslink /var/www/testlink

6. Once you have it in your /www directory change the permissions of some folders in your testlink directory:
# chmod 777 gui/templates_c
# chmod 777 logs
# chmod 777 upload_area

7. Go to your browser and access the testlink installer at: localhost/testlink and follow the instructions in your screen.

8. If everything went well installer will tell you that the configuration file was not written, to do this, go to /var/www/testlink and create a file named config_db.inc.php with the information provided in the installer.

9. Now you can close your browser for a while.

10. The last step is change a configuration file by editing the file in /var/www/testlink/config.inic.php and set the following parameters:

$tlCfg->config_check_warning_mode = 'SILENT'
$tlCfg->api->enabled = TRUE;
$tlCfg->exec_cfg->enable_test_automation = ENABLED;

11. Done!. Now you can go to localhost/testlink and login with the username: admin and password: admin
Publicado 23rd January 2013 por Walter Vargas
0
Add a comment

Informaticando

    Página principal

    Jan
    23
    Configuring Selenium Automation and Integration with Testlink

    Configuring Selenium Automation and Integration with Testlink


    1. Download the files needed:

        Selenium - http://bit.ly/S9S9xX

        Testlink API Client - http://bit.ly/W31yrF

        Selenium Server - http://bit.ly/W9jTjB

        Teslink Java API - http://bit.ly/11Co8Lw


    Notes:
    a. In order to make this work, make sure you can add the libraries of the Testlink client api package to your project.

    b. Your testlink project must have the test cases as automatic execution and project must be enabled for automation.

    2. Generate an API key from testlink
    2.1 Go to http://localhost/testlink and login with your credentials
    2.2 Go to My Settings and generate a new api key.

    3. Create a simple java application.

    3.1 Create an interface class named IConstants and paste the following code:

    public interface IConstants {

    final String DEVKEY = "<code generated by testlink>";

    final String URL = "http://localhost/testlink/lib/api/xmlrpc.php";

    final String PROJECTNAME = "Testing Project";

    final String TESTPLANNAME = "Test Plan Demo";

    final String BUILDNAME = "Build Demo";

    final String TESTCASENAME = "Test Last Name";

    }


    3.2 Create a class named TestClass and paste the following code:

    import testlink.api.java.client.TestLinkAPIClient;
    import testlink.api.java.client.TestLinkAPIException;


    public class TestClass implements IConstants {

    public static void reportTestCaseResult(String projectName,String testplanName,

    String testcaseName, String buildName,String msg,String result)

    throws TestLinkAPIException {

        TestLinkAPIClient testlinkAPIClient = new TestLinkAPIClient(DEVKEY,URL);

        testlinkAPIClient.reportTestCaseResult(projectName, testplanName,

            testcaseName, buildName, msg, result);

         }

    }

    3.3 Create a class named DemoSelenium (could be the same as your project name) and paste the following code:

    import org.junit.After;
    import org.junit.Before;
    import org.junit.Test;
    import org.openqa.selenium.By;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebDriverBackedSelenium;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.firefox.FirefoxDriver;
    import com.thoughtworks.selenium.SeleneseTestBase;
    import com.thoughtworks.selenium.Selenium;
    import testlink.api.java.client.TestLinkAPIResults;


    public class DemoSelenium extends SeleneseTestBase implements IConstants {

    String validateText;
    WebDriver driver;
    Selenium selenium;

    @Before
    public void antesde() throws Exception
    {
    driver = new FirefoxDriver();

        String baseUrl ="http://qatraining.avantica.avanticatec.net/QATestWeb/Register.aspx";
        
        selenium = new WebDriverBackedSelenium(driver, baseUrl);
        selenium.open(baseUrl);
        
    }

    @After
    public void limpiar()
    {
    System.out.println("Check Results");
    //driver.close();
    }

    @Test
    public void testLastName () throws Exception{

    String result=null;
    String msg=null;

    try{

    WebElement firstname = driver.findElement(By.id("ctl00_Main_CreateUserWizardControl_CreateUserStepContainer_FirstName"));
    firstname.sendKeys("Walter");

    //WebElement lastname = driver.findElement(By.id("ctl00_Main_CreateUserWizardControl_CreateUserStepContainer_LastName"));
    //lastname.sendKeys("Vargas");

    WebElement email = driver.findElement(By.id("ctl00_Main_CreateUserWizardControl_CreateUserStepContainer_Email"));
    email.sendKeys("walter.vargas@avantica.net");

    WebElement username = driver.findElement(By.id("ctl00_Main_CreateUserWizardControl_CreateUserStepContainer_UserName"));
    username.sendKeys("wvargas");

    WebElement password = driver.findElement(By.id("ctl00_Main_CreateUserWizardControl_CreateUserStepContainer_Password"));
    password.sendKeys("123456");

    WebElement confpass = driver.findElement(By.id("ctl00_Main_CreateUserWizardControl_CreateUserStepContainer_ConfirmPassword"));
    confpass.sendKeys("123456");

    WebElement question = driver.findElement(By.id("ctl00_Main_CreateUserWizardControl_CreateUserStepContainer_Question"));
    question.sendKeys("Where do you work?");

    WebElement answer = driver.findElement(By.id("ctl00_Main_CreateUserWizardControl_CreateUserStepContainer_Answer"));
    answer.sendKeys("Avantica");


    WebElement subButton = driver.findElement(By.id("ctl00_Main_CreateUserWizardControl___CustomNav0_StepNextButtonButton"));
    subButton.click();

    WebElement message = driver.findElement(By.id("ctl00_Main_CreateUserWizardControl_CreateUserStepContainer_LastNameRequired"));


    String validateText = "";

    if(message.isDisplayed()==true){


    if(message.getText().compareTo(validateText) > 0){
    System.out.println("Failed: Text do not match");
    result = TestLinkAPIResults.TEST_FAILED;
    }

    else{
    System.out.println("Passed");
    result = TestLinkAPIResults.TEST_PASSED;
    }
    }
    else
    System.out.println("Failed: There is no a error message!");
    }
    catch(Exception e){
    result = TestLinkAPIResults.TEST_FAILED;
    msg = e.getMessage();
    e.printStackTrace();
    }

    finally{
    TestClass.reportTestCaseResult(PROJECTNAME, TESTPLANNAME,TESTCASENAME, BUILDNAME, msg, result);
    }
    }
    }

    4. Now run the project as JUnit Test.
    5. Check the results in localhost/testlink
    Publicado 23rd January 2013 por Walter Vargas
    4
    Ver comentarios
        Edwuard13 de febrero de 2014, 4:17

        hello, can you tell me, where do I save java files?... sorry for my english, but, I dont speak .... thanks
        Responder
        Walter Va

